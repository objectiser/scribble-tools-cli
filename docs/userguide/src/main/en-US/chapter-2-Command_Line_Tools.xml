<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="sid-2195699">
    
    <title>Command Line Tools</title>
    <para>
      This section describes how to use the command line tools that are available in the
      
      <code>bin</code>
      folder of the Scribble protocol tools distribution.
    </para>
    <para>
      Information on the Scribble protocol notation (or language) can be found in the
      
      <emphasis role="italics">Scribble Protocol Guide</emphasis>
      .
    </para>
    <section id="sid-2195698">
      
      <title>Parsing a Protocol description</title>
      <para>
        The
        <emphasis role="italics">parse</emphasis>
        command takes a single parameter, which is the
        
        path to the file containing the protocol description to be parsed.
      </para>
      <para>
        For example, if the user is in the top level folder of the Scribble tools distribution,
        
        without the
        <code>bin</code>
        folder being added to the system path, then the
        
        following command can be executed to parse one of the sample protocol descriptions:
      </para>
      <informalexample>
        <programlisting>bin/parse.sh samples/purchasing/Purchasing.spr</programlisting>
      </informalexample>
      <para>If the supplied file path is not valid, then the command will report an error.</para>
      <para>
        This command will read the protocol description, as shown below, and convert it
        
        into an internal object model representation.
      </para>
      <informalexample>
        <programlisting>import Order;
import CreditCheck;
import CreditOk;
import Confirmation;
import InsufficientCredit;
import OrderRejected;
import OutOfStock;

protocol Purchasing (role Buyer) {
    Buyer introduces Seller;

    Order from Buyer to Seller;

    choice at Seller {
        OutOfStock from Seller to Buyer;
    } or {
        Seller introduces CreditAgency;

        CreditCheck from Seller to CreditAgency;

        choice at CreditAgency {
            CreditOk from CreditAgency to Seller;
            Confirmation from Seller to Buyer;
        } or {
            InsuficientCredit from CreditAgency to Seller;
            OrderRejected from Seller to Buyer;
        }
    }
}</programlisting>
      </informalexample>
      <para>
        If any errors are detected in the syntax of the parsed protocol description, then
        
        these will be reported to the command window.
      </para>
    </section>
    <section id="sid-2195700">
      
      <title>Validating a Protocol description</title>
      <para>
        The
        <emphasis role="italics">validate</emphasis>
        command takes a single parameter, which is the path to the file containing the protocol description to be validated.
      </para>
      <para>
        For example, if the user is in the top level folder of the Scribble tools distribution, without the
        <code>bin</code>
        folder being added to the system path, then the following command can be executed to validate one of the sample protocol descriptions:
      </para>
      <informalexample>
        <programlisting>bin/validate.sh samples/purchasing/Purchasing.spr</programlisting>
      </informalexample>
      <para>
        When this command is performed initially, it will complete without any errors. However
        
        if you edit the
        <code>samples/purchasing/Purchasing.spr</code>
        file, and change
        
        the following line:
      </para>
      <informalexample>
        <programlisting>Order from Buyer to Seller;</programlisting>
      </informalexample>
      <para>
        For example, change the
        <emphasis role="italics">Seller</emphasis>
        role to
        
        <emphasis role="italics">Seller2</emphasis>
        , and then re-run the
        <emphasis role="italics">validate</emphasis>
        
        command. This will result in the following error messages:
      </para>
      <informalexample>
        <programlisting>ERROR: [line 12] Unknown role 'Seller2'</programlisting>
      </informalexample>
    </section>
    <section id="sid-2195701">
      
      <title>Checking Conformance a Protocol description</title>
      <note>
        <para>
          Conformance checking functionality has been temporarily removed from this
          
          release, although an improved implementation should be provided in the near
          
          future, and therefore the command infrastructure has remained for now.
        </para>
      </note>
      <para>
        The
        <emphasis role="italics">conforms</emphasis>
        command takes two parameters, which are
        
        both paths to a file containing a protocol description. The first parameter
        
        is the protocol description to be checked for conformance against the
        
        second parameter's protocol description. So the second parameter is the
        
        <emphasis role="italics">reference</emphasis>
        protocol description.
      </para>
      <para>
        For example, if the user is in the top level folder of the Scribble tools distribution,
        
        without the
        <code>bin</code>
        folder being added to the system path, then the
        
        following command can be executed to check one of the sample protocol descriptions
        
        as being conformant with another reference protocol description:
      </para>
      <informalexample>
        <programlisting>bin/conforms.sh samples/models/conformance_descriptions/OrderProcess.spr samples/models/conformance_descriptions/ReferenceOrderProcess.spr</programlisting>
      </informalexample>
      <para>
        If you inspect the two process definitions, you will find one difference. The
        
        first protocol definition has the following interaction:
      </para>
      <informalexample>
        <programlisting>MyOrder from Buyer to Seller;</programlisting>
      </informalexample>
      <para>The second, reference protocol description, has the following interaction:</para>
      <informalexample>
        <programlisting>Order from Buyer to Seller;</programlisting>
      </informalexample>
      <para>This results in the following conformance error message:</para>
      <informalexample>
        <programlisting>ERROR: Type mismatch with referenced description, was expecting Order</programlisting>
      </informalexample>
    </section>
    <section id="sid-2195702">
      
      <title>Projecting a Protocol description</title>
      <para>
        The
        <emphasis role="italics">project</emphasis>
        command takes two parameters. The first parameter
        
        is the protocol description to be projected and the second parameter is the
        
        <emphasis role="italics">participant</emphasis>
        .
      </para>
      <para>
        For example, if the user is in the top level folder of the Scribble tools distribution,
        
        without the
        <code>bin</code>
        folder being added to the system path, then the
        
        following command can be executed to project one of the sample protocol descriptions:
      </para>
      <informalexample>
        <programlisting>bin/project.sh samples/purchasing/Purchasing.spr CreditAgency</programlisting>
      </informalexample>
      <para>This results in the following located Protocol being displayed on the console:</para>
      <informalexample>
        <programlisting>import Order;
import CreditCheck;
import CreditOk;
import Confirmation;
import InsufficientCredit;
import OrderRejected;
import OutOfStock;
protocol Purchasing at CreditAgency(role Seller) {
    CreditCheck from Seller;
    choice at CreditAgency {
        CreditOk to Seller;
    } or {
        InsuficientCredit to Seller;
    }
}</programlisting>
      </informalexample>
    </section>
    <section id="sid-2195703">
      
      <title>Simulating a Protocol description against an Event List</title>
      <para>
        The
        <emphasis role="italics">simulate</emphasis>
        command takes two parameters. The first parameter
        
        is the located protocol description and the second parameter is the event list to
        
        be simulated against the protocol.
      </para>
      <para>
        For example, if the user is in the top level folder of the Scribble tools distribution,
        
        without the
        <code>bin</code>
        folder being added to the system path, then the
        
        following command can be executed to simulate the protocol description:
      </para>
      <informalexample>
        <programlisting>bin/simulate.sh samples/purchasing/Purchasing@Buyer.spr samples/purchasing/Purchasing@Buyer.events</programlisting>
      </informalexample>
      <para>
        The event file is a
        <emphasis role="italics">comma separated value (csv)</emphasis>
        format, with the first
        
        column representing the event type, and the second representing the value relevant for the
        
        event type. The event types are listed below:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            send
            
            The value represents the message type.
          </para>
        </listitem>
        <listitem>
          <para>
            receive
            
            The value represents the message type.
          </para>
        </listitem>
      </itemizedlist>
      <para>The event file used in the sample command above is:</para>
      <informalexample>
        <programlisting>send,Order
receive,Confirmation</programlisting>
      </informalexample>
      <para>and the result of running the command is:</para>
      <informalexample>
        <programlisting>INFO: Validated Send Order
INFO: Validated Receive Confirmation</programlisting>
      </informalexample>
    </section>
  </chapter>
